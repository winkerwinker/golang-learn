package map_test

import (
	"fmt"
	"github.com/pkg/errors"
	"reflect"
	"testing"
	"time"
)

/*

指针
Dig101-Go之如何在函数内修改指针指向

*/

// apollo 数据源，没有其他任何附加的映射方式
type MetaDataSource struct {
	NameSpace        string
	Name             string
	IpPort           string
	Type             string
	Nodes            []string
	MaxActive        int
	MaxIdle          int
	IdleTimeout      time.Duration
	DialConnTimeout  time.Duration
	DialReadTimeout  time.Duration
	DialWriteTimeout time.Duration
}

func testPanic() (err error) {

	fmt.Println(2 << 5)
	fmt.Println("=====")
	bytes := []byte{103, 111, 114, 111, 117, 116, 105, 110, 101, 32, 50, 49, 57, 55, 52, 53, 54, 50, 32, 91, 114, 117, 110, 110, 105, 110, 103, 93, 58, 10, 114, 117, 110, 116, 105, 109, 101, 47, 100, 101, 98, 117, 103, 46, 83, 116, 97, 99, 107, 40, 48, 120, 99, 50, 50, 49, 55, 99, 52, 102, 49, 48, 44, 32, 48, 120, 102, 51, 53, 98, 54, 48, 44, 32, 48, 120, 49, 57, 54, 50, 57, 100, 48, 41, 10, 9, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 103, 111, 47, 115, 114, 99, 47, 114, 117, 110, 116, 105, 109, 101, 47, 100, 101, 98, 117, 103, 47, 115, 116, 97, 99, 107, 46, 103, 111, 58, 50, 52, 32, 43, 48, 120, 57, 102, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 107, 105, 116, 47, 112, 97, 110, 105, 99, 95, 104, 97, 110, 100, 108, 101, 114, 46, 76, 111, 103, 80, 97, 110, 105, 99, 83, 116, 97, 99, 107, 40, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 107, 105, 116, 47, 112, 97, 110, 105, 99, 95, 104, 97, 110, 100, 108, 101, 114, 47, 108, 111, 103, 95, 112, 97, 110, 105, 99, 46, 103, 111, 58, 49, 51, 32, 43, 48, 120, 100, 49, 10, 112, 97, 110, 105, 99, 40, 48, 120, 102, 51, 53, 98, 54, 48, 44, 32, 48, 120, 49, 57, 54, 50, 57, 100, 48, 41, 10, 9, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 103, 111, 47, 115, 114, 99, 47, 114, 117, 110, 116, 105, 109, 101, 47, 112, 97, 110, 105, 99, 46, 103, 111, 58, 57, 54, 57, 32, 43, 48, 120, 49, 55, 53, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 47, 115, 111, 114, 116, 101, 114, 46, 40, 42, 67, 111, 110, 102, 105, 103, 97, 98, 108, 101, 83, 111, 114, 116, 101, 114, 41, 46, 83, 101, 116, 78, 111, 100, 101, 67, 111, 110, 102, 105, 103, 40, 48, 120, 48, 44, 32, 48, 120, 99, 48, 53, 56, 99, 53, 50, 102, 48, 48, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 47, 115, 111, 114, 116, 101, 114, 47, 115, 111, 114, 116, 101, 114, 46, 103, 111, 58, 50, 50, 48, 32, 43, 48, 120, 50, 48, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 46, 98, 117, 105, 108, 100, 72, 97, 110, 100, 108, 101, 114, 115, 40, 48, 120, 99, 48, 55, 97, 51, 97, 51, 56, 52, 48, 44, 32, 48, 120, 51, 44, 32, 48, 120, 51, 44, 32, 48, 120, 99, 48, 53, 57, 98, 48, 97, 99, 48, 48, 44, 32, 48, 120, 101, 101, 100, 51, 48, 48, 44, 32, 48, 120, 99, 48, 49, 55, 57, 48, 100, 100, 100, 56, 44, 32, 48, 120, 101, 99, 100, 99, 99, 48, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 47, 99, 114, 101, 97, 116, 101, 46, 103, 111, 58, 54, 53, 32, 43, 48, 120, 54, 100, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 46, 78, 101, 119, 68, 65, 71, 40, 48, 120, 99, 50, 48, 51, 101, 51, 54, 101, 50, 56, 44, 32, 48, 120, 50, 44, 32, 48, 120, 99, 48, 99, 99, 102, 98, 49, 48, 97, 48, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 110, 111, 100, 101, 115, 47, 104, 97, 110, 100, 108, 101, 114, 95, 102, 97, 99, 116, 111, 114, 121, 47, 99, 114, 101, 97, 116, 101, 46, 103, 111, 58, 50, 51, 32, 43, 48, 120, 52, 100, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 46, 84, 114, 97, 100, 105, 116, 105, 111, 110, 82, 101, 99, 111, 109, 109, 101, 110, 100, 40, 48, 120, 99, 48, 53, 57, 54, 99, 55, 53, 52, 48, 44, 32, 48, 120, 50, 44, 32, 48, 120, 99, 48, 53, 57, 98, 48, 97, 99, 48, 48, 44, 32, 48, 120, 99, 48, 53, 97, 54, 97, 99, 100, 48, 49, 44, 32, 48, 120, 99, 48, 49, 55, 57, 48, 100, 102, 53, 48, 44, 32, 48, 120, 100, 102, 98, 102, 55, 50, 44, 32, 48, 120, 99, 48, 49, 55, 57, 48, 100, 102, 48, 48, 44, 32, 48, 120, 99, 48, 49, 55, 57, 48, 100, 101, 100, 56, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 46, 103, 111, 58, 55, 53, 32, 43, 48, 120, 99, 53, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 46, 77, 111, 100, 101, 83, 101, 108, 101, 99, 116, 111, 114, 40, 48, 120, 99, 48, 53, 57, 54, 99, 55, 53, 52, 48, 44, 32, 48, 120, 50, 44, 32, 48, 120, 99, 48, 53, 57, 98, 48, 97, 99, 48, 48, 44, 32, 48, 120, 48, 44, 32, 48, 120, 99, 51, 49, 48, 101, 48, 50, 102, 99, 48, 44, 32, 48, 120, 99, 49, 102, 57, 48, 49, 99, 49, 50, 48, 44, 32, 48, 120, 99, 48, 53, 97, 54, 97, 99, 100, 50, 48, 44, 32, 48, 120, 99, 49, 56, 98, 56, 54, 97, 56, 97, 48, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 47, 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 114, 46, 103, 111, 58, 49, 50, 51, 32, 43, 48, 120, 102, 101, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 104, 97, 110, 100, 108, 101, 114, 46, 40, 42, 72, 97, 110, 100, 108, 101, 114, 41, 46, 82, 101, 99, 70, 117, 110, 87, 105, 116, 104, 79, 112, 116, 105, 111, 110, 97, 108, 46, 102, 117, 110, 99, 51, 40, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 104, 97, 110, 100, 108, 101, 114, 47, 114, 101, 99, 70, 117, 110, 99, 87, 105, 116, 104, 79, 112, 116, 105, 111, 110, 97, 108, 46, 103, 111, 58, 51, 55, 57, 32, 43, 48, 120, 49, 48, 53, 10, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 103, 111, 102, 117, 110, 99, 46, 97, 115, 110, 121, 70, 117, 110, 99, 46, 71, 111, 46, 102, 117, 110, 99, 49, 40, 48, 120, 99, 49, 102, 57, 98, 53, 99, 55, 54, 48, 44, 32, 48, 120, 99, 48, 53, 97, 54, 97, 100, 48, 53, 48, 41, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 103, 111, 102, 117, 110, 99, 47, 71, 111, 114, 111, 117, 116, 105, 110, 101, 46, 103, 111, 58, 52, 55, 32, 43, 48, 120, 52, 102, 10, 99, 114, 101, 97, 116, 101, 100, 32, 98, 121, 32, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 103, 111, 102, 117, 110, 99, 46, 97, 115, 110, 121, 70, 117, 110, 99, 46, 71, 111, 10, 9, 47, 103, 97, 105, 97, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 45, 106, 111, 98, 47, 103, 105, 116, 46, 120, 105, 97, 111, 106, 117, 107, 101, 106, 105, 46, 99, 111, 109, 47, 99, 120, 121, 120, 95, 114, 101, 99, 47, 122, 101, 117, 115, 47, 109, 105, 100, 100, 108, 101, 95, 115, 101, 114, 118, 101, 114, 47, 115, 114, 99, 47, 103, 111, 102, 117, 110, 99, 47, 71, 111, 114, 111, 117, 116, 105, 110, 101, 46, 103, 111, 58, 51, 56, 32, 43, 48, 120, 98, 55, 10}
	fmt.Println(string(bytes))

	defer func() {
		err1 := recover()
		if err1 != nil {
			fmt.Println(err1)
			fmt.Println(reflect.TypeOf(err1))
			err = errors.WithMessage(err1.(error), "panic at DalMetaDataSourceAction")
			// 如果需要recover 之后还有返回，不能用 return，只能给err赋值
		}
	}()

	panic("hahh")
}

func TestDo9(t *testing.T) {






	testPanic()
	//
	//// 使用协程同时加载
	//strings := []string{"11", "22", "33"}
	////fmt.Println(strings[-1])
	//var wg sync.WaitGroup
	//wg.Add(len(strings))
	//
	//for key, val := range strings {
	//	go func(key int, val string) {
	//		defer wg.Done()
	//
	//		fmt.Printf("%d , %s \n ", key, val)
	//	}(key, val)
	//}
	//
	////time.Sleep(2 * time.Second)
	//wg.Wait()
	//fmt.Printf("==== done \n")
	//source := MetaDataSource{
	//	NameSpace: "CXYX-Zeus",
	//	Name:      "CustomizeData", //    string
	//	Type:      "raw",           // string
	//}
	//source := MetaDataSource{
	//	Name: "cxyxgoodsgeature2", // string
	//	// ip port 可能是多个吗
	//	IpPort:           "10.85.129.62:4600",           // string
	//	Type:             "fusion",                      // string
	//	Nodes:            []string{"10.85.129.62:4600"}, // []string
	//	MaxActive:        1200,                          // int
	//	MaxIdle:          10,                            // int
	//	IdleTimeout:      time.Second * 3,               // time.Duration
	//	DialConnTimeout:  time.Second * 3,               // time.Duration
	//	DialReadTimeout:  time.Second * 3,               // time.Duration
	//	DialWriteTimeout: time.Second * 3,               // time.Duration
	//}
	//
	//marshal, _ := json.Marshal(source)
	//fmt.Println(string(marshal))
}

//
//func init() {
//	//todo
//	rc1, err := NewRedisClient("cxyxgoodsgeature2", []string{"10.85.129.62:4600"}, 1200, 10, time.Second*3, time.Second*3, time.Second*3, time.Second*3)
//	if err == nil {
//		RedisClientNameMap[rc1.Name] = rc1
//		//如果存在一个地址多个池的情况，给大池
//		RedisClientAddrMap["10.85.129.62:4600"] = rc1
//	} else {
//		// 阻止启动
//	}
//	logger.RegisterField("_redis_client", "traceid", "error", "msg")
//
//}
